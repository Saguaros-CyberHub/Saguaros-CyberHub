networks:
  cybercore-net:
    driver: bridge

services:
  postgres:
    image: postgres:17
    container_name: cybercore-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      ENABLED_MODULES: ${ENABLED_MODULES}
    ports:
      - "0.0.0.0:5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./config/postgres/001_init_db.sql:/docker-entrypoint-initdb.d/001_init_db.sql:ro
      - ./config/postgres/modules:/docker-entrypoint-initdb.d/modules:ro
      - ./config/postgres/050_apply_modules.sh:/docker-entrypoint-initdb.d/050_apply_modules.sh:ro
    shm_size: 256mb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cybercore-net

  redis:
    image: redis:7-alpine
    container_name: cybercore-redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
    # no published port (internal only)
    volumes:
      - ./data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "PING"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cybercore-net

  n8n:
    image: n8nio/n8n:latest
    container_name: cybercore-n8n
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    user: 0:0 # run as root to be able to bind to low ports if needed (CHANGEME)
    environment:
      N8N_USER_FOLDER: /.n8n
      # Base
      TZ: ${TZ}
      GENERIC_TIMEZONE: ${TZ}
      NODE_ENV: production
      # Local host/URL (no TLS, local only)
      N8N_HOST: localhost
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      WEBHOOK_URL: http://localhost:5678/
      # Security
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      # Database (direct mode for single instance)
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${DB_NAME}
      DB_POSTGRESDB_USER: ${DB_USER}
      DB_POSTGRESDB_PASSWORD: ${DB_PASSWORD}
      # Execution mode: single instance (no worker)
      EXECUTIONS_MODE: regular
    entrypoint: ["/bin/sh","-lc"]
    command: "/docker-entrypoint-initn8n.sh"
    ports:
      - "0.0.0.0:5678:5678"
    volumes:
      - ./data/n8n:/home/node/.n8n:rw
      - ./config/n8n/init.sh:/docker-entrypoint-initn8n.sh:ro
      - ./config/n8n/workflows:/config/workflows:ro
      - ./config/n8n/credentials:/config/credentials:ro
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://0.0.0.0:5678/healthz',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))"]
      interval: 15s
      timeout: 5s
      retries: 10
    networks:
      - cybercore-net

  adminer:
    image: adminer:latest
    container_name: cybercore-adminer
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "0.0.0.0:8080:8080"
    networks:
      - cybercore-net