services:
  traefik:
    image: traefik:latest
    restart: unless-stopped
    command:
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      # Single HTTP entrypoint inside the container
      - --entrypoints.web.address=:80
    ports:
      # Expose HTTP on localhost:8080 (container :80)
      - "127.0.0.1:8080:80"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - cybercore-net

  # Keycloak Database
  keycloak-db:
    image: postgres:16
    container_name: cybercore-keycloak-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${KC_DB_NAME:-keycloak}
      POSTGRES_USER: ${KC_DB_USER:-keycloak}
      POSTGRES_PASSWORD: ${KC_DB_PASS:-keycloak}
    volumes:
      - ./data/keycloak-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KC_DB_USER:-keycloak} -d ${KC_DB_NAME:-keycloak}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cybercore-net

  # Keycloak Identity Provider
  keycloak:
    image: quay.io/keycloak/keycloak:26.0.5
    container_name: cybercore-keycloak
    restart: unless-stopped
    depends_on:
      keycloak-db:
        condition: service_healthy
    command: ["start"]
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak.rule=Host(`${KC_HOSTNAME:-auth.localhost}`)
      - traefik.http.routers.keycloak.entrypoints=web
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
    environment:
      # Admin credentials
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_ADMIN_USER:-admin}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_ADMIN_PASS:-admin}
      # Database
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/${KC_DB_NAME:-keycloak}
      KC_DB_USERNAME: ${KC_DB_USER:-keycloak}
      KC_DB_PASSWORD: ${KC_DB_PASS:-keycloak}
      # HTTP settings
      KC_HOSTNAME: ${KC_HOSTNAME:-auth.localhost}
      KC_HTTP_ENABLED: "true"
      KC_PROXY_HEADERS: xforwarded
      KC_HTTP_RELATIVE_PATH: /
      # Features
      KC_FEATURES: token-exchange,admin-fine-grained-authz
      KC_HEALTH_ENABLED: "true"
      KC_METRICS_ENABLED: "true"
      # Logging
      KC_LOG_LEVEL: ${KC_LOG_LEVEL:-INFO}
    volumes:
      - ./auth/keycloak-themes:/opt/keycloak/themes
      - ./auth/keycloak-providers:/opt/keycloak/providers
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8080/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks:
      - cybercore-net

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: unless-stopped
    labels:
      - traefik.enable=true
      # Use a localhost subdomain for clean routing (RFC 6761)
      - traefik.http.routers.n8n.rule=Host(`${N8N_HOST}`)
      - traefik.http.routers.n8n.entrypoints=web
      - traefik.http.services.n8n.loadbalancer.server.port=${N8N_PORT}
    environment:
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=${N8N_PORT}
      - N8N_PROTOCOL=http
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - NODE_ENV=development
      - WEBHOOK_URL=http://${N8N_HOST}:8080/
      - GENERIC_TIMEZONE=America/Phoenix
      - OLLAMA_BASE_URL=http://host.docker.internal:11434
      - N8N_RUNNERS_ENABLED=true
      - N8N_SECURE_COOKIE=false
    volumes:
      - ./data/n8n-data:/home/node/.n8n
      - ./data/n8n-files:/files
    networks:
      - cybercore-net
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16
    container_name: ${DB_HOST}
    restart: unless-stopped
    shm_size: 128mb
    environment:
      POSTGRES_USER: ${DB_USER}  # Not for production
      POSTGRES_PASSWORD: ${DB_PASS}  # Not for production
      POSTGRES_DB: ${DB_NAME}  # Not for production
    ports:
      # Expose on ${DB_HOST_PORT} to avoid clashing with local Postgres
      - "127.0.0.1:${DB_HOST_PORT}:${DB_PORT}"
    volumes:
      - ./data/db_data:/var/lib/postgresql/data
      - ./data/db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cybercore-net

  adminer:
    image: adminer:latest
    container_name: cybercore-adminer
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.rule=Host(`adminer.localhost`)
      - traefik.http.routers.adminer.entrypoints=web
      - traefik.http.services.adminer.loadbalancer.server.port=8080
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cybercore-net

  # AD-optimized sync service (DirSync) — opt in with: --profile ad-optimized
  ldap-sync:
    image: python:3.11-slim
    container_name: cybercore-ldap-sync
    restart: unless-stopped
    profiles: [ad-optimized]
    environment:
      LDAP_URI: "ldaps://ad.example.org"
      LDAP_BASE_DN: "DC=example,DC=org"
      LDAP_BIND_DN: "CN=svc-dirsync,OU=Service Accounts,DC=example,DC=org"
      LDAP_BIND_PW: "supersecret"
      DB_HOST: "${DB_HOST}"
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"
      DB_USER: "${DB_USER}"
      DB_PASS: "${DB_PASS}"
      DRY_RUN: "true"
      INTERVAL: "30"
      LOG_LEVEL: "INFO"
      INCLUDE_DELETES: "false"
      DIRSYNC_PAGE_SIZE: "2000"
    volumes:
      - ./automation/scripts/universal-ldap-sync.py:/app/universal-ldap-sync.py:ro
      - ./data/ad_cookies:/app/cookies
    command: >
      sh -c "pip install psycopg2-binary ldap3 && python /app/universal-ldap-sync.py"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cybercore-net

  # Universal LDAP sync (AD/OpenLDAP/389DS) — opt in with: --profile universal
  universal-ldap-sync:
    image: python:3.11-slim
    container_name: cybercore-universal-ldap-sync
    restart: unless-stopped
    profiles: [universal]
    environment:
      LDAP_TYPE: "activedirectory"   # Active Directory, OpenLDAP, 389DS, Auto
      LDAP_URI: "ldaps://ad.example.org"
      LDAP_BASE_DN: "DC=example,DC=org"
      LDAP_BIND_DN: "CN=svc-dirsync,OU=Service Accounts,DC=example,DC=org"
      LDAP_BIND_PW: "supersecret"  # Not for production
      DB_HOST: "${DB_HOST}"  # Not for production
      DB_PORT: "${DB_PORT}"
      DB_NAME: "${DB_NAME}"  # Not for production
      DB_USER: "${DB_USER}"  # Not for production
      DB_PASS: "${DB_PASS}"  # Not for production
      DRY_RUN: "true"
      INTERVAL: "30"
      LOG_LEVEL: "INFO"
      INCLUDE_DELETES: "false"
      SYNC_PAGE_SIZE: "2000"
      SYNC_STATE_FILE: "/app/sync_state/.sync_state"
      DIRSYNC_COOKIE_FILE: "/app/sync_state/.dirsync_cookie"
    volumes:
      - ./automation/scripts/universal-ldap-sync.py:/app/universal-ldap-sync.py:ro
      - ./data/sync_state:/app/sync_state
    command: >
      sh -c "pip install psycopg2-binary ldap3 && python /app/universal-ldap-sync.py"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - cybercore-net

networks:
  cybercore-net:
    driver: bridge